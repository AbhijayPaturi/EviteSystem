Friday 12/03 (sick): 
	- Overview: Revamped UML design chart in order to fix errors with regards to inheritance and redesign the entire program. 
				
				(2 hour UML Design Session)
				- Redesigned UML 
					- Host is now a subclass of UserRegistered, which is a subclass of User 
					- Party sublcasses have changed so they represent different types, and not names, 
					  of parties. 
					- Enums have been reconsidered. Added a Menu enum, which is essential. 
			
	- Preliminary TODO: 
		- Start programming the User and Party inheritance hierarchies 
			- Create all the sublclasses 
				- Add instance variables and basic essential methods 
				- Add getters and setters 
				- Add toString() methods 
		- Develop best strategy to start coding the classes (start with User or with Party?)
		- Implement/start programming interface(s) (Premium interface as of now)
		- Continue programming the methods unique to each class in each hierarchy 
		- Add run() method to ensure the entire program works in User
		- Add option for User to choose being a Host or just a UserRegistered 
		- Add Menu of options for User to modify/create/etc. parties 
		- Add Food enum containing Appetizers, Main Courses, and Desserts (maybe even 3 different enums)
		- Add PartyType enum 
		
Saturday 12/04 (sick too): 
	- Overview: Started programming the User and Party inheritance hierarchies and created an enum 
				containing the potential RSVP responses of guests. 
				
				(2 hour coding session)
				- Started programming the two main inheritance hierarchies 
					- Added instance variables, getters, setters, and other essential methods to 
					  each class. 
					- Added UserResponse Enum to represent the RSVP response of each guest 
					  invited to the party
					- Added BFF class 
					
	- TODO: 
		- Add more toString() methods to more subclasses (need to wait to see if this makes sense 
		  after programming all the classes fully)
		- Implement/start programming interface(s) (Premium interface as of now)
		- Continue programming the methods unique to each class in each hierarchy 
		- Add run() method to ensure the entire program works in User
		- Add option for User to choose being a Host or just a UserRegistered 
		- Add Menu of options for User to modify/create/etc. parties 
		- Add Food enum containing Appetizers, Main Courses, and Desserts (maybe even 3 different enums)
		- Add PartyType enum 
		
Monday 12/06: 
	- Overview : Started adding more functions and instance variables to the User and Party hierarchies.
				 Added Menu options for both Guests and Hosts to interact with to RSVP to/create/modify a Party. 
				 Added more functionality and options to the program. 
				 
				(5 hour coding session) 
				- Added menu of options for Guests and Hosts 
				- Created methods for each Menu option for Guest 
					- method chooseAction() allows the Guest to interact with the menu
				- Added other methods specific to each class 
				- Updated UML design to reflect minute changes made while coding 
				- Decided to not add Food enum as that would complicate my code and I still need to fix the basics
				- Added Contributions interface for PotLuck and GiftExchange parties
				- Deleted Host subclass to redesign it to be simpler to create and use 
	
	- TODO: 
		- make methods that will create and read Party and User files in ProgramRunner
		- make ProgramRunner class to run the entire program 
		- revamp UML design to accommodate for these new fileReader and parseParty functions 
			- simply UML design first to implement these functions 
			- check to see if the Party and Guest data is being stored and read in properly 
		- Need to re-implement/reprogram Host subclass
		
Wednesday 12/08: 
	- Overview : Started coding ProgramRunner class that will allow the entire program to run.
				 Added a few enums.  
				 
				(1 hour coding session) 
				- Added PartyType and PartyCategory enums
				- Added methods in ProgramRunner to allow a Guest to logIn to the Evite System 
				  or create a new account. Added method stubs for the other menu options. 
	
	- TODO: 
		- make methods that will create and read Party and User files in ProgramRunner
		- finish writing methods for menu of options for a Guest 
		- revamp UML design to accommodate for these new fileReader and parseParty functions 
			- simple UML design first to implement these functions 
			- check to see if the Party and Guest data is being stored and read in properly 
		- Need to re-implement/reprogram Host subclass

Thursday 12/09: 

	- Overview : Created FileReader class to make .txt files and read in data from these .txt files. Redesigned UML to 
				 account for a class that can make and read in .txt files. Finished implementing methods corresponding 
				 to the menu of options in EviteSystem. Added other methods in each of the hierarchies that 
				 allow for data to be updated and set seamlessly. 
				 
				(7 hour coding session) 
				- Revamped UML design to accommodate for FileReader class 
				- Created FileReader class 
					- Implemented methods that create .txt files containing data on each guest and Party 
					- Implemented methods that read the .txt files containing data on each guest and Party 
					- Implemented methods that parse the data that is read in into corresponding GuestRegistered and Party objects 
				- Finished writing methods for each of the menu options for a GuestRegistered/Host to choose from 
				- Added methods in each class in the User and Party inheritance hierarchies to allow 
				  the GuestUnregistered/GuestRegistered/Host to view and manipulate the data and so when the data is being read in 
				  from the .txt files, each of the other attributes of each Party or guest is being set and updated too. 
			    - Update UML diagram 
			    
	- TODO: 
		- Need to re-implement/reprogram Host subclass
		- Allow each guest to interact with each of the Party subclasses that the guest is invited to 
		- Make enums containing the menu of options for each guest to interact with for each Party he/she/they is invited to
		- Create run() method in EviteSystem to allow guests to interact with the entire EviteSystem program
		- Add GuestResponse enum to allow guests to RSVP to parties they are invited to 
			- Add Map containing each GuestResponse as a key and a list of guest emails who with the corresponding RSVP response 
			  to the party in the Party class. 
			- Modify methods in FileReader class to account for this newly implemented Map 
			- Modify methods in EviteSystem to account for this new Map that will need to be updated with data 
			  as guests interact with the EviteSystem program and .txt files are read in.
			- Add methods to update and view a guest's RSVP response for each Party in the Party class 
			- Add menu options for each Party subclass's menu of options to allow the user to update and view their own RSVP 
			  response to the Party. 
	 	- Implement other necessary methods in EviteSystem to allow each guest to login or create an account 
	 		- Allow guest to interact with a menu of options depending on their status of being a GuestUnregistered or 
	 		  GuestRegistered/Host
		- Add emojis to the text being displayed to each guest/host
		- Add more text to be displayed to each guest/host 
		- Add option in menu of options for the PotLuck and GiftExchange classes to access the data returned by 
		  the function implemented by these two classes that implement the Contributions interface 
		  	- Add corresponding case in the switch statement of these two Party subclasses and call the corresponding 
		  	  method so the guest/host can see this data too. 

Friday 12/10:		
	- Overview : Finished coding a working EviteSystem program by adding all the classes I designed in the UML diagram 
				 and implementing interactive and data returning methods in each class. Added menu of options for each class 
				 so when the guest views the invitation for each Party he/she/they is invited to, the guest can, for instance,
				 sign up to bring food or gifts or view/update their RSVP. Added RSVP functionality too. Made minor changes in 
				 some methods across both hierarchies to allow the EviteSystem to run without major errors. 
				 
				(12 hour coding session) 
				- Re-implemented Host subclass 
				- Allow each guest to interact with each of the Party subclasses that the guest is invited to 
				- Made enums containing the menu of options for each guest to interact with for each Party he/she/they is invited to
				- Created run() method in EviteSystem to allow guests to interact with the entire EviteSystem program
				- Added GuestResponse enum to allow guests to RSVP to parties they are invited to 
				- Added Map containing each GuestResponse as a key and a list of guest emails who with the corresponding RSVP response 
			  	  to the party in the Party class. 
					- Modified methods in FileReader class to account for this newly implemented Map 
					- Modified methods in EviteSystem to account for this new Map that will need to be updated with data 
			 		  as guests interact with the EviteSystem program and .txt files are read in.
					- Added methods to update and view a guest's RSVP response for each Party in the Party class 
					- Added menu options for each Party subclass's menu of options to allow the user to update and view their own RSVP 
			  		  response to the Party. 
			  	- Implemented other necessary methods in EviteSystem to allow each guest to login or create an account 
	 				- Allowed guest to interact with a menu of options depending on their status of being a GuestUnregistered or 
	 		      	  GuestRegistered/Host
	 		    - Add option in menu of options for the PotLuck and GiftExchange classes to access the data returned by 
		 		  the function implemented by these two classes that implement the Contributions interface 
		  		- Add corresponding case in the switch statement of these two Party subclasses and call the corresponding 
		  	      method so the guest/host can see this data too. 
		  	    - Update UML diagram
	
	- TODO: 
		- Add emojis to the text being displayed to each guest/host
		- Add more text to be displayed to each guest/host 
		- Add limited number of tries to entering password to log in to the EviteSystem
		
	